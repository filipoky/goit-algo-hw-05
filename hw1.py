
def caching_fibonacci():
    cache = {}  # Ініціалізуємо словник для зберігання вже обчислених значень

    # Внутрішня функція fibonacci використовує кеш і рекурсію
    def fibonacci(n):
        # Обробляємо крайні випадки: якщо n <= 0, повертаємо 0
        if n <= 0:
            return 0
        # Якщо n == 1, повертаємо 1 (другий елемент послідовності)
        elif n == 1:
            return 1
        # Якщо значення вже є у кеші, повертаємо його з кешу
        if n in cache:
            return cache[n]

        # Якщо в кеші немає — рекурсивно обчислюємо значення
        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)

        # Повертаємо обчислене значення, яке тепер зберігається в кеші
        return cache[n]

    # Повертаємо функцію fibonacci з доступом до кешу
    return fibonacci


# Створюємо функцію з кешем
fib = caching_fibonacci()

# Обчислюємо 10-те та 15-те число Фібоначчі
print(fib(10))  # Виведе 55
print(fib(15))  # Виведе 610
print(fib(30))


